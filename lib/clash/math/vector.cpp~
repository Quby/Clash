#include<clash/math.hpp>
//@todo *=(Matrix4)
using namespace clash::math;

Vector3::Vector3(float sx=0.f, float sy=0.f, float sz=0.f) {
	x = sx;
	y = sy;
	z = sz;
}

void Vector3::invert () {
	x = -x;
	y = -y;
	z = -z;
}

float Vector3::len () {
	return sqrt(x*x + y*y + z*z);
}

//Operations with scalar
void Vector3::operator+= (Vector3& vec) {
	x += vec.x;
	y += vec.y;
	z += vec.z;
}

void Vector3::operator-= (Vector3& vec) {
	x -= vec.x;
	y -= vec.y;
	z -= vec.z;
}

void Vector3::operator*= (float t) {
	x *= t;
	y *= t;
	z *= t;
}

void Vector3::operator/= (float t) {
	x /= t;
	y /= t;
	z /= t;
}

//Operations with vector
void Vector3::operator*= (Vector3& vec) {
	float dx, dy, dz;
	dx = y*vec.z - vec.y*z;
	dy = z*vec.x - vec.z*x;
	dz = x*vec.y - vec.x*y;
	
	x = dx;
	y = dy;
	z = dz;	
}


float Vector3::operator* (Vector3& vec) {
	return sqrt(x*vec.x + y*vec.y + z*vec.z);
}

void Vector3::operator* (Quaternion& q) {
	Vector3 v(*this);
	v.normalise();
 
	Quaternion res(v.x, v.y, v.z, 0.f);
	Quaternion dq(q);
	dq.conjugate();
	
	res *= dq;
	res *= q;
	
	x = res.x;
	y = res.y;
	z = res.z;
}

void Vector3::operator* (Matrix4& m) {
	Vector3 v;
	v.x = x*m[ 0] + y*m[ 1] + z*m[ 2] + m[ 3];
	v.y = x*m[ 4] + y*m[ 5] + z*m[ 6] + m[ 7];
	v.z = x*m[ 8] + y*m[ 9] + z*m[10] + m[11];
	x = v.x;
	y = v.y;
	z = v.z;
}
